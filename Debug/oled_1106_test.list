
oled_1106_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  00020708  2**0
                  CONTENTS
  4 .ARM          00000000  080035c4  080035c4  00020708  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c4  080035c4  00020708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000708  20000000  080035d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000708  08003cd8  00020708  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08003cd8  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020708  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f545  00000000  00000000  00020731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237d  00000000  00000000  0002fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00031ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  00032938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b07f  00000000  00000000  00033248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c315  00000000  00000000  0004e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e92  00000000  00000000  0005a5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e246e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000e24c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000708 	.word	0x20000708
 8000128:	00000000 	.word	0x00000000
 800012c:	08003034 	.word	0x08003034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000070c 	.word	0x2000070c
 8000148:	08003034 	.word	0x08003034

0800014c <_ZN12Adafruit_GFXC1Ess>:


 #define pgm_read_byte(addr) (*(const unsigned char *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
 8000158:	4613      	mov	r3, r2
 800015a:	803b      	strh	r3, [r7, #0]
  WIDTH(w), HEIGHT(h)
 800015c:	4a18      	ldr	r2, [pc, #96]	; (80001c0 <_ZN12Adafruit_GFXC1Ess+0x74>)
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	601a      	str	r2, [r3, #0]
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	887a      	ldrh	r2, [r7, #2]
 8000166:	809a      	strh	r2, [r3, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	883a      	ldrh	r2, [r7, #0]
 800016c:	80da      	strh	r2, [r3, #6]
{
  _width    = WIDTH;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	811a      	strh	r2, [r3, #8]
  _height   = HEIGHT;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	815a      	strh	r2, [r3, #10]
  rotation  = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	755a      	strb	r2, [r3, #21]
  cursor_y  = cursor_x    = 0;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2200      	movs	r2, #0
 800018c:	819a      	strh	r2, [r3, #12]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	81da      	strh	r2, [r3, #14]
  textsize  = 1;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2201      	movs	r2, #1
 800019c:	751a      	strb	r2, [r3, #20]
  textcolor = textbgcolor = 0xFFFF;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001a4:	825a      	strh	r2, [r3, #18]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	8a5a      	ldrh	r2, [r3, #18]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	821a      	strh	r2, [r3, #16]
  wrap      = true;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2201      	movs	r2, #1
 80001b2:	759a      	strb	r2, [r3, #22]
}
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4618      	mov	r0, r3
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	08003564 	.word	0x08003564

080001c4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b08b      	sub	sp, #44	; 0x2c
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4603      	mov	r3, r0
 80001d4:	817b      	strh	r3, [r7, #10]
 80001d6:	460b      	mov	r3, r1
 80001d8:	813b      	strh	r3, [r7, #8]
 80001da:	4613      	mov	r3, r2
 80001dc:	80fb      	strh	r3, [r7, #6]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80001de:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80001e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80001e6:	1ad3      	subs	r3, r2, r3
 80001e8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80001ec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80001f0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80001f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80001f8:	1acb      	subs	r3, r1, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	429a      	cmp	r2, r3
 8000202:	bfcc      	ite	gt
 8000204:	2301      	movgt	r3, #1
 8000206:	2300      	movle	r3, #0
 8000208:	b2db      	uxtb	r3, r3
 800020a:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t dx, dy;
  int16_t err;
  int16_t ystep;

  if (steep) {
 800020c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000210:	2b00      	cmp	r3, #0
 8000212:	d00b      	beq.n	800022c <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    swap(x0, y0);
 8000214:	897b      	ldrh	r3, [r7, #10]
 8000216:	843b      	strh	r3, [r7, #32]
 8000218:	893b      	ldrh	r3, [r7, #8]
 800021a:	817b      	strh	r3, [r7, #10]
 800021c:	8c3b      	ldrh	r3, [r7, #32]
 800021e:	813b      	strh	r3, [r7, #8]
    swap(x1, y1);
 8000220:	88fb      	ldrh	r3, [r7, #6]
 8000222:	83fb      	strh	r3, [r7, #30]
 8000224:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000226:	80fb      	strh	r3, [r7, #6]
 8000228:	8bfb      	ldrh	r3, [r7, #30]
 800022a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  if (x0 > x1) {
 800022c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000234:	429a      	cmp	r2, r3
 8000236:	dd0b      	ble.n	8000250 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
    swap(x0, x1);
 8000238:	897b      	ldrh	r3, [r7, #10]
 800023a:	83bb      	strh	r3, [r7, #28]
 800023c:	88fb      	ldrh	r3, [r7, #6]
 800023e:	817b      	strh	r3, [r7, #10]
 8000240:	8bbb      	ldrh	r3, [r7, #28]
 8000242:	80fb      	strh	r3, [r7, #6]
    swap(y0, y1);
 8000244:	893b      	ldrh	r3, [r7, #8]
 8000246:	837b      	strh	r3, [r7, #26]
 8000248:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800024a:	813b      	strh	r3, [r7, #8]
 800024c:	8b7b      	ldrh	r3, [r7, #26]
 800024e:	873b      	strh	r3, [r7, #56]	; 0x38
  }


  dx = x1 - x0;
 8000250:	88fa      	ldrh	r2, [r7, #6]
 8000252:	897b      	ldrh	r3, [r7, #10]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	b29b      	uxth	r3, r3
 8000258:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 800025a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800025e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	2b00      	cmp	r3, #0
 8000266:	bfb8      	it	lt
 8000268:	425b      	neglt	r3, r3
 800026a:	82fb      	strh	r3, [r7, #22]

  err = dx / 2;
 800026c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000270:	0fda      	lsrs	r2, r3, #31
 8000272:	4413      	add	r3, r2
 8000274:	105b      	asrs	r3, r3, #1
 8000276:	84fb      	strh	r3, [r7, #38]	; 0x26
  

  if (y0 < y1) {
 8000278:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800027c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000280:	429a      	cmp	r2, r3
 8000282:	da02      	bge.n	800028a <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
    ystep = 1;
 8000284:	2301      	movs	r3, #1
 8000286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000288:	e002      	b.n	8000290 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
  } else {
    ystep = -1;
 800028a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800028e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0<=x1; x0++) {
 8000290:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000298:	429a      	cmp	r2, r3
 800029a:	dc32      	bgt.n	8000302 <_ZN12Adafruit_GFX8drawLineEsssst+0x13e>
    if (steep) {
 800029c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d00a      	beq.n	80002ba <_ZN12Adafruit_GFX8drawLineEsssst+0xf6>
      drawPixel(y0, x0, color);
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	681c      	ldr	r4, [r3, #0]
 80002aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80002ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002b0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	47a0      	blx	r4
 80002b8:	e009      	b.n	80002ce <_ZN12Adafruit_GFX8drawLineEsssst+0x10a>
    } else {
      drawPixel(x0, y0, color);
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	681c      	ldr	r4, [r3, #0]
 80002c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80002c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80002c6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	47a0      	blx	r4
    }
    err -= dy;
 80002ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80002d0:	8afb      	ldrh	r3, [r7, #22]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80002d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da09      	bge.n	80002f4 <_ZN12Adafruit_GFX8drawLineEsssst+0x130>
      y0 += ystep;
 80002e0:	893a      	ldrh	r2, [r7, #8]
 80002e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002e4:	4413      	add	r3, r2
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	813b      	strh	r3, [r7, #8]
      err += dx;
 80002ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80002ec:	8b3b      	ldrh	r3, [r7, #24]
 80002ee:	4413      	add	r3, r2
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0<=x1; x0++) {
 80002f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	3301      	adds	r3, #1
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	817b      	strh	r3, [r7, #10]
 8000300:	e7c6      	b.n	8000290 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
    }
  }
}
 8000302:	bf00      	nop
 8000304:	372c      	adds	r7, #44	; 0x2c
 8000306:	46bd      	mov	sp, r7
 8000308:	bd90      	pop	{r4, r7, pc}

0800030a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 800030a:	b590      	push	{r4, r7, lr}
 800030c:	b087      	sub	sp, #28
 800030e:	af02      	add	r7, sp, #8
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	4608      	mov	r0, r1
 8000314:	4611      	mov	r1, r2
 8000316:	461a      	mov	r2, r3
 8000318:	4603      	mov	r3, r0
 800031a:	817b      	strh	r3, [r7, #10]
 800031c:	460b      	mov	r3, r1
 800031e:	813b      	strh	r3, [r7, #8]
 8000320:	4613      	mov	r3, r2
 8000322:	80fb      	strh	r3, [r7, #6]
  drawFastHLine(x, y, w, color);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	330c      	adds	r3, #12
 800032a:	681c      	ldr	r4, [r3, #0]
 800032c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000330:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000334:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	4603      	mov	r3, r0
 800033e:	68f8      	ldr	r0, [r7, #12]
 8000340:	47a0      	blx	r4
  drawFastHLine(x, y+h-1, w, color);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	330c      	adds	r3, #12
 8000348:	681c      	ldr	r4, [r3, #0]
 800034a:	893a      	ldrh	r2, [r7, #8]
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	4413      	add	r3, r2
 8000350:	b29b      	uxth	r3, r3
 8000352:	3b01      	subs	r3, #1
 8000354:	b29b      	uxth	r3, r3
 8000356:	b21a      	sxth	r2, r3
 8000358:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800035c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	4603      	mov	r3, r0
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	47a0      	blx	r4
  drawFastVLine(x, y, h, color);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3308      	adds	r3, #8
 8000370:	681c      	ldr	r4, [r3, #0]
 8000372:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000376:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800037a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800037e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	4603      	mov	r3, r0
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	47a0      	blx	r4
  drawFastVLine(x+w-1, y, h, color);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3308      	adds	r3, #8
 800038e:	681c      	ldr	r4, [r3, #0]
 8000390:	897a      	ldrh	r2, [r7, #10]
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	4413      	add	r3, r2
 8000396:	b29b      	uxth	r3, r3
 8000398:	3b01      	subs	r3, #1
 800039a:	b29b      	uxth	r3, r3
 800039c:	b219      	sxth	r1, r3
 800039e:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80003a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80003a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	4603      	mov	r3, r0
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	47a0      	blx	r4
}
 80003b0:	bf00      	nop
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd90      	pop	{r4, r7, pc}

080003b8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80003b8:	b5b0      	push	{r4, r5, r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af02      	add	r7, sp, #8
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	4608      	mov	r0, r1
 80003c2:	4611      	mov	r1, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	4603      	mov	r3, r0
 80003c8:	817b      	strh	r3, [r7, #10]
 80003ca:	460b      	mov	r3, r1
 80003cc:	813b      	strh	r3, [r7, #8]
 80003ce:	4613      	mov	r3, r2
 80003d0:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3304      	adds	r3, #4
 80003d8:	681c      	ldr	r4, [r3, #0]
 80003da:	893a      	ldrh	r2, [r7, #8]
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	4413      	add	r3, r2
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	3b01      	subs	r3, #1
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 80003ec:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80003f0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80003f4:	8c3a      	ldrh	r2, [r7, #32]
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	462b      	mov	r3, r5
 80003fc:	4602      	mov	r2, r0
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	47a0      	blx	r4
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bdb0      	pop	{r4, r5, r7, pc}

0800040a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 800040a:	b590      	push	{r4, r7, lr}
 800040c:	b087      	sub	sp, #28
 800040e:	af02      	add	r7, sp, #8
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	4608      	mov	r0, r1
 8000414:	4611      	mov	r1, r2
 8000416:	461a      	mov	r2, r3
 8000418:	4603      	mov	r3, r0
 800041a:	817b      	strh	r3, [r7, #10]
 800041c:	460b      	mov	r3, r1
 800041e:	813b      	strh	r3, [r7, #8]
 8000420:	4613      	mov	r3, r2
 8000422:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3304      	adds	r3, #4
 800042a:	681c      	ldr	r4, [r3, #0]
 800042c:	897a      	ldrh	r2, [r7, #10]
 800042e:	88fb      	ldrh	r3, [r7, #6]
 8000430:	4413      	add	r3, r2
 8000432:	b29b      	uxth	r3, r3
 8000434:	3b01      	subs	r3, #1
 8000436:	b29b      	uxth	r3, r3
 8000438:	b218      	sxth	r0, r3
 800043a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800043e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000442:	8c3b      	ldrh	r3, [r7, #32]
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	4603      	mov	r3, r0
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	47a0      	blx	r4
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bd90      	pop	{r4, r7, pc}

0800045a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 800045a:	b590      	push	{r4, r7, lr}
 800045c:	b089      	sub	sp, #36	; 0x24
 800045e:	af02      	add	r7, sp, #8
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	4608      	mov	r0, r1
 8000464:	4611      	mov	r1, r2
 8000466:	461a      	mov	r2, r3
 8000468:	4603      	mov	r3, r0
 800046a:	817b      	strh	r3, [r7, #10]
 800046c:	460b      	mov	r3, r1
 800046e:	813b      	strh	r3, [r7, #8]
 8000470:	4613      	mov	r3, r2
 8000472:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 8000474:	897b      	ldrh	r3, [r7, #10]
 8000476:	82fb      	strh	r3, [r7, #22]
 8000478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800047c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000484:	440b      	add	r3, r1
 8000486:	429a      	cmp	r2, r3
 8000488:	da15      	bge.n	80004b6 <_ZN12Adafruit_GFX8fillRectEsssst+0x5c>
    drawFastVLine(i, y, h, color);
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3308      	adds	r3, #8
 8000490:	681c      	ldr	r4, [r3, #0]
 8000492:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8000496:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800049a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800049e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	4603      	mov	r3, r0
 80004a4:	68f8      	ldr	r0, [r7, #12]
 80004a6:	47a0      	blx	r4
  for (int16_t i=x; i<x+w; i++) {
 80004a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	3301      	adds	r3, #1
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	82fb      	strh	r3, [r7, #22]
 80004b4:	e7e0      	b.n	8000478 <_ZN12Adafruit_GFX8fillRectEsssst+0x1e>
  }
}
 80004b6:	bf00      	nop
 80004b8:	371c      	adds	r7, #28
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd90      	pop	{r4, r7, pc}

080004be <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80004be:	b590      	push	{r4, r7, lr}
 80004c0:	b085      	sub	sp, #20
 80004c2:	af02      	add	r7, sp, #8
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3314      	adds	r3, #20
 80004d0:	681c      	ldr	r4, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80004de:	887a      	ldrh	r2, [r7, #2]
 80004e0:	9201      	str	r2, [sp, #4]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	460b      	mov	r3, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	47a0      	blx	r4
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd90      	pop	{r4, r7, pc}

080004f6 <_ZN12Adafruit_GFX5writeEh>:
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
#else
void Adafruit_GFX::write(uint8_t c) {
 80004f6:	b5b0      	push	{r4, r5, r7, lr}
 80004f8:	b086      	sub	sp, #24
 80004fa:	af04      	add	r7, sp, #16
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	460b      	mov	r3, r1
 8000500:	70fb      	strb	r3, [r7, #3]
#endif
  if (c == '\n') {
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	2b0a      	cmp	r3, #10
 8000506:	d111      	bne.n	800052c <_ZN12Adafruit_GFX5writeEh+0x36>
    cursor_y += textsize*8;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800050e:	b29a      	uxth	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7d1b      	ldrb	r3, [r3, #20]
 8000514:	b29b      	uxth	r3, r3
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	b29b      	uxth	r3, r3
 800051a:	4413      	add	r3, r2
 800051c:	b29b      	uxth	r3, r3
 800051e:	b21a      	sxth	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	81da      	strh	r2, [r3, #14]
    cursor_x  = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	819a      	strh	r2, [r3, #12]
    }
  }
#if ARDUINO >= 100
  return 1;
#endif
}
 800052a:	e050      	b.n	80005ce <_ZN12Adafruit_GFX5writeEh+0xd8>
  } else if (c == '\r') {
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b0d      	cmp	r3, #13
 8000530:	d04d      	beq.n	80005ce <_ZN12Adafruit_GFX5writeEh+0xd8>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	8a1b      	ldrh	r3, [r3, #16]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	8a52      	ldrh	r2, [r2, #18]
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	7d09      	ldrb	r1, [r1, #20]
 800054a:	78fd      	ldrb	r5, [r7, #3]
 800054c:	9102      	str	r1, [sp, #8]
 800054e:	9201      	str	r2, [sp, #4]
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	462b      	mov	r3, r5
 8000554:	4622      	mov	r2, r4
 8000556:	4601      	mov	r1, r0
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f83d 	bl	80005d8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000564:	b29a      	uxth	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7d1b      	ldrb	r3, [r3, #20]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	0049      	lsls	r1, r1, #1
 8000570:	440b      	add	r3, r1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b29b      	uxth	r3, r3
 8000576:	4413      	add	r3, r2
 8000578:	b29b      	uxth	r3, r3
 800057a:	b21a      	sxth	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	819a      	strh	r2, [r3, #12]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7d9b      	ldrb	r3, [r3, #22]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d022      	beq.n	80005ce <_ZN12Adafruit_GFX5writeEh+0xd8>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000596:	4618      	mov	r0, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7d1b      	ldrb	r3, [r3, #20]
 800059c:	461a      	mov	r2, r3
 800059e:	4613      	mov	r3, r2
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4403      	add	r3, r0
 80005a8:	4299      	cmp	r1, r3
 80005aa:	dd10      	ble.n	80005ce <_ZN12Adafruit_GFX5writeEh+0xd8>
      cursor_y += textsize*8;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7d1b      	ldrb	r3, [r3, #20]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	4413      	add	r3, r2
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	81da      	strh	r2, [r3, #14]
      cursor_x = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	819a      	strh	r2, [r3, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005d8 <_ZN12Adafruit_GFX8drawCharEsshtth>:

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {			
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af02      	add	r7, sp, #8
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	4608      	mov	r0, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	4603      	mov	r3, r0
 80005e8:	817b      	strh	r3, [r7, #10]
 80005ea:	460b      	mov	r3, r1
 80005ec:	813b      	strh	r3, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	71fb      	strb	r3, [r7, #7]
  if((x >= _width)            || // Clip right
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	f280 80e1 	bge.w	80007c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ec>
     (y >= _height)           || // Clip bottom
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  if((x >= _width)            || // Clip right
 8000608:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800060c:	429a      	cmp	r2, r3
 800060e:	f280 80d9 	bge.w	80007c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ec>
     ((x + 6 * size - 1) < 0) || // Clip left
 8000612:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000616:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	440b      	add	r3, r1
     (y >= _height)           || // Clip bottom
 8000624:	2b00      	cmp	r3, #0
 8000626:	f340 80cd 	ble.w	80007c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ec>
     ((y + 8 * size - 1) < 0))   // Clip top
 800062a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800062e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 8000636:	2b00      	cmp	r3, #0
 8000638:	f340 80c4 	ble.w	80007c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ec>
    return;

  for (int8_t i=0; i<6; i++ ) {
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
 8000640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000644:	2b05      	cmp	r3, #5
 8000646:	f300 80be 	bgt.w	80007c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ee>
    uint8_t line;
    if (i == 5) 
 800064a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800064e:	2b05      	cmp	r3, #5
 8000650:	d102      	bne.n	8000658 <_ZN12Adafruit_GFX8drawCharEsshtth+0x80>
      line = 0x0;
 8000652:	2300      	movs	r3, #0
 8000654:	75bb      	strb	r3, [r7, #22]
 8000656:	e00b      	b.n	8000670 <_ZN12Adafruit_GFX8drawCharEsshtth+0x98>
    else 
      line = pgm_read_byte(FONT_5x7+(c*5)+i);
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	4613      	mov	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	461a      	mov	r2, r3
 8000662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000666:	4413      	add	r3, r2
 8000668:	4a58      	ldr	r2, [pc, #352]	; (80007cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x1f4>)
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	75bb      	strb	r3, [r7, #22]
    for (int8_t j = 0; j<8; j++) {
 8000670:	2300      	movs	r3, #0
 8000672:	757b      	strb	r3, [r7, #21]
 8000674:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000678:	2b07      	cmp	r3, #7
 800067a:	f300 809c 	bgt.w	80007b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1de>
      if (line & 0x1) {
 800067e:	7dbb      	ldrb	r3, [r7, #22]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d044      	beq.n	8000712 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13a>
        if (size == 1) // default size
 8000688:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800068c:	2b01      	cmp	r3, #1
 800068e:	d114      	bne.n	80006ba <_ZN12Adafruit_GFX8drawCharEsshtth+0xe2>
          drawPixel(x+i, y+j, color);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681c      	ldr	r4, [r3, #0]
 8000696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800069a:	b29a      	uxth	r2, r3
 800069c:	897b      	ldrh	r3, [r7, #10]
 800069e:	4413      	add	r3, r2
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b219      	sxth	r1, r3
 80006a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	893b      	ldrh	r3, [r7, #8]
 80006ac:	4413      	add	r3, r2
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	47a0      	blx	r4
 80006b8:	e073      	b.n	80007a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ca>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3314      	adds	r3, #20
 80006c0:	681c      	ldr	r4, [r3, #0]
 80006c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80006cc:	b292      	uxth	r2, r2
 80006ce:	fb02 f303 	mul.w	r3, r2, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	897b      	ldrh	r3, [r7, #10]
 80006d6:	4413      	add	r3, r2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b219      	sxth	r1, r3
 80006dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80006e6:	b292      	uxth	r2, r2
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	893b      	ldrh	r3, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b218      	sxth	r0, r3
 80006f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006fa:	b21d      	sxth	r5, r3
 80006fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000700:	b21b      	sxth	r3, r3
 8000702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000704:	9201      	str	r2, [sp, #4]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	462b      	mov	r3, r5
 800070a:	4602      	mov	r2, r0
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	47a0      	blx	r4
 8000710:	e047      	b.n	80007a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ca>
        }
      } else if (bg != color) {
 8000712:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000716:	429a      	cmp	r2, r3
 8000718:	d043      	beq.n	80007a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ca>
        if (size == 1) // default size
 800071a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800071e:	2b01      	cmp	r3, #1
 8000720:	d114      	bne.n	800074c <_ZN12Adafruit_GFX8drawCharEsshtth+0x174>
          drawPixel(x+i, y+j, bg);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800072c:	b29a      	uxth	r2, r3
 800072e:	897b      	ldrh	r3, [r7, #10]
 8000730:	4413      	add	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	b219      	sxth	r1, r3
 8000736:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800073a:	b29a      	uxth	r2, r3
 800073c:	893b      	ldrh	r3, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	b29b      	uxth	r3, r3
 8000742:	b21a      	sxth	r2, r3
 8000744:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	47a0      	blx	r4
 800074a:	e02a      	b.n	80007a2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ca>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3314      	adds	r3, #20
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000758:	b29b      	uxth	r3, r3
 800075a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800075e:	b292      	uxth	r2, r2
 8000760:	fb02 f303 	mul.w	r3, r2, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	897b      	ldrh	r3, [r7, #10]
 8000768:	4413      	add	r3, r2
 800076a:	b29b      	uxth	r3, r3
 800076c:	b219      	sxth	r1, r3
 800076e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000772:	b29b      	uxth	r3, r3
 8000774:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000778:	b292      	uxth	r2, r2
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	893b      	ldrh	r3, [r7, #8]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	b218      	sxth	r0, r3
 8000788:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800078c:	b21d      	sxth	r5, r3
 800078e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000792:	b21b      	sxth	r3, r3
 8000794:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	462b      	mov	r3, r5
 800079c:	4602      	mov	r2, r0
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	47a0      	blx	r4
        }
      }
      line >>= 1;
 80007a2:	7dbb      	ldrb	r3, [r7, #22]
 80007a4:	105b      	asrs	r3, r3, #1
 80007a6:	75bb      	strb	r3, [r7, #22]
    for (int8_t j = 0; j<8; j++) {
 80007a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	757b      	strb	r3, [r7, #21]
 80007b4:	e75e      	b.n	8000674 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9c>
  for (int8_t i=0; i<6; i++ ) {
 80007b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3301      	adds	r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e73d      	b.n	8000640 <_ZN12Adafruit_GFX8drawCharEsshtth+0x68>
    return;
 80007c4:	bf00      	nop
    }
  }
}
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}
 80007cc:	08003060 	.word	0x08003060

080007d0 <_ZNK12Adafruit_GFX11getRotationEv>:

void Adafruit_GFX::setTextWrap(bool w) {
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) const {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  return rotation;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7d5b      	ldrb	r3, [r3, #21]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_ZNK12Adafruit_GFX5widthEv>:
    break;
  }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  return _width;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <_ZNK12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) const {
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  return _height;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <_ZN16Adafruit_SSD13069drawPixelEsst>:
#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

extern I2C_HandleTypeDef hi2c1;

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4603      	mov	r3, r0
 8000828:	817b      	strh	r3, [r7, #10]
 800082a:	460b      	mov	r3, r1
 800082c:	813b      	strh	r3, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 8000832:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db17      	blt.n	800086a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffd2 	bl	80007e6 <_ZNK12Adafruit_GFX5widthEv>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800084a:	4293      	cmp	r3, r2
 800084c:	da0d      	bge.n	800086a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 800084e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db09      	blt.n	800086a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffd0 	bl	80007fe <_ZNK12Adafruit_GFX6heightEv>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000866:	4293      	cmp	r3, r2
 8000868:	db01      	blt.n	800086e <_ZN16Adafruit_SSD13069drawPixelEsst+0x56>
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <_ZN16Adafruit_SSD13069drawPixelEsst+0x58>
 800086e:	2300      	movs	r3, #0
 8000870:	2b00      	cmp	r3, #0
 8000872:	f040 80b3 	bne.w	80009dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c4>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffa9 	bl	80007d0 <_ZNK12Adafruit_GFX11getRotationEv>
 800087e:	4603      	mov	r3, r0
 8000880:	2b03      	cmp	r3, #3
 8000882:	d02c      	beq.n	80008de <_ZN16Adafruit_SSD13069drawPixelEsst+0xc6>
 8000884:	2b03      	cmp	r3, #3
 8000886:	dc3b      	bgt.n	8000900 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d002      	beq.n	8000892 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7a>
 800088c:	2b02      	cmp	r3, #2
 800088e:	d011      	beq.n	80008b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9c>
 8000890:	e036      	b.n	8000900 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
  case 1:
    ssd1306_swap(x, y);
 8000892:	897b      	ldrh	r3, [r7, #10]
 8000894:	82bb      	strh	r3, [r7, #20]
 8000896:	893b      	ldrh	r3, [r7, #8]
 8000898:	817b      	strh	r3, [r7, #10]
 800089a:	8abb      	ldrh	r3, [r7, #20]
 800089c:	813b      	strh	r3, [r7, #8]
    x = WIDTH - x - 1;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	897b      	ldrh	r3, [r7, #10]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	817b      	strh	r3, [r7, #10]
    break;
 80008b2:	e025      	b.n	8000900 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
  case 2:
    x = WIDTH - x - 1;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	897b      	ldrh	r3, [r7, #10]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - y - 1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	893b      	ldrh	r3, [r7, #8]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	3b01      	subs	r3, #1
 80008d8:	b29b      	uxth	r3, r3
 80008da:	813b      	strh	r3, [r7, #8]
    break;
 80008dc:	e010      	b.n	8000900 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
  case 3:
    ssd1306_swap(x, y);
 80008de:	897b      	ldrh	r3, [r7, #10]
 80008e0:	82fb      	strh	r3, [r7, #22]
 80008e2:	893b      	ldrh	r3, [r7, #8]
 80008e4:	817b      	strh	r3, [r7, #10]
 80008e6:	8afb      	ldrh	r3, [r7, #22]
 80008e8:	813b      	strh	r3, [r7, #8]
    y = HEIGHT - y - 1;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	893b      	ldrh	r3, [r7, #8]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	813b      	strh	r3, [r7, #8]
    break;
 80008fe:	bf00      	nop
  }

  // x is which column
    switch (color)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d049      	beq.n	800099a <_ZN16Adafruit_SSD13069drawPixelEsst+0x182>
 8000906:	2b02      	cmp	r3, #2
 8000908:	dc69      	bgt.n	80009de <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d022      	beq.n	8000954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x13c>
 800090e:	2b01      	cmp	r3, #1
 8000910:	d165      	bne.n	80009de <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    {
      case WHITE:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 8000912:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000916:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da00      	bge.n	8000920 <_ZN16Adafruit_SSD13069drawPixelEsst+0x108>
 800091e:	3307      	adds	r3, #7
 8000920:	10db      	asrs	r3, r3, #3
 8000922:	b218      	sxth	r0, r3
 8000924:	4603      	mov	r3, r0
 8000926:	01db      	lsls	r3, r3, #7
 8000928:	4413      	add	r3, r2
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	b25a      	sxtb	r2, r3
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	b25b      	sxtb	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b259      	sxtb	r1, r3
 8000942:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000946:	4603      	mov	r3, r0
 8000948:	01db      	lsls	r3, r3, #7
 800094a:	4413      	add	r3, r2
 800094c:	b2c9      	uxtb	r1, r1
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8000950:	54d1      	strb	r1, [r2, r3]
 8000952:	e044      	b.n	80009de <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
      case BLACK:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 8000954:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000958:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da00      	bge.n	8000962 <_ZN16Adafruit_SSD13069drawPixelEsst+0x14a>
 8000960:	3307      	adds	r3, #7
 8000962:	10db      	asrs	r3, r3, #3
 8000964:	b218      	sxth	r0, r3
 8000966:	4603      	mov	r3, r0
 8000968:	01db      	lsls	r3, r3, #7
 800096a:	4413      	add	r3, r2
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	b25a      	sxtb	r2, r3
 8000972:	893b      	ldrh	r3, [r7, #8]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	b25b      	sxtb	r3, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	b25b      	sxtb	r3, r3
 8000984:	4013      	ands	r3, r2
 8000986:	b259      	sxtb	r1, r3
 8000988:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800098c:	4603      	mov	r3, r0
 800098e:	01db      	lsls	r3, r3, #7
 8000990:	4413      	add	r3, r2
 8000992:	b2c9      	uxtb	r1, r1
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8000996:	54d1      	strb	r1, [r2, r3]
 8000998:	e021      	b.n	80009de <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
      case INVERSE: buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 800099a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800099e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da00      	bge.n	80009a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x190>
 80009a6:	3307      	adds	r3, #7
 80009a8:	10db      	asrs	r3, r3, #3
 80009aa:	b218      	sxth	r0, r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	893b      	ldrh	r3, [r7, #8]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	4053      	eors	r3, r2
 80009c8:	b259      	sxtb	r1, r3
 80009ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80009ce:	4603      	mov	r3, r0
 80009d0:	01db      	lsls	r3, r3, #7
 80009d2:	4413      	add	r3, r2
 80009d4:	b2c9      	uxtb	r1, r1
 80009d6:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 80009d8:	54d1      	strb	r1, [r2, r3]
 80009da:	e000      	b.n	80009de <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    return;
 80009dc:	bf00      	nop
    }

}
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000084 	.word	0x20000084

080009e8 <_ZN16Adafruit_SSD1306C1Ea>:


// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2220      	movs	r2, #32
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fba6 	bl	800014c <_ZN12Adafruit_GFXC1Ess>
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <_ZN16Adafruit_SSD1306C1Ea+0x54>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
  sclk = dc = cs = sid = -1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	765a      	strb	r2, [r3, #25]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f993 2019 	ldrsb.w	r2, [r3, #25]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	775a      	strb	r2, [r3, #29]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f993 201d 	ldrsb.w	r2, [r3, #29]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	76da      	strb	r2, [r3, #27]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f993 201b 	ldrsb.w	r2, [r3, #27]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	769a      	strb	r2, [r3, #26]
  rst = reset;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	78fa      	ldrb	r2, [r7, #3]
 8000a2e:	771a      	strb	r2, [r3, #28]
}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	0800358c 	.word	0x0800358c

08000a40 <_ZN16Adafruit_SSD130612sh1106_beginEhhb>:

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
}

void Adafruit_SSD1306::sh1106_begin(uint8_t vccstate, uint8_t i2caddr, bool reset)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4603      	mov	r3, r0
 8000a50:	70fb      	strb	r3, [r7, #3]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70bb      	strb	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	707b      	strb	r3, [r7, #1]
    _vccstate = vccstate;
 8000a5a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	761a      	strb	r2, [r3, #24]
    _i2caddr = i2caddr;
 8000a62:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	75da      	strb	r2, [r3, #23]

    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <_ZN16Adafruit_SSD130612sh1106_beginEhhb+0x94>)
 8000a70:	f001 f9cc 	bl	8001e0c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f000 ff3c 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <_ZN16Adafruit_SSD130612sh1106_beginEhhb+0x94>)
 8000a82:	f001 f9c3 	bl	8001e0c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 ff33 	bl	80018f4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2108      	movs	r1, #8
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <_ZN16Adafruit_SSD130612sh1106_beginEhhb+0x94>)
 8000a94:	f001 f9ba 	bl	8001e0c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9c:	f000 ff2a 	bl	80018f4 <HAL_Delay>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <_ZN16Adafruit_SSD130612sh1106_beginEhhb+0x94>)
 8000aa6:	f001 f9b1 	bl	8001e0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_C_GPIO_Port, D_C_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2110      	movs	r1, #16
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <_ZN16Adafruit_SSD130612sh1106_beginEhhb+0x94>)
 8000ab0:	f001 f9ac 	bl	8001e0c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f000 ff1c 	bl	80018f4 <HAL_Delay>

    ssd1306_command(0xAF); // on
 8000abc:	21af      	movs	r1, #175	; 0xaf
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f80a 	bl	8000ad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    sh1106_display();
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f895 	bl	8000bf4 <_ZN16Adafruit_SSD130614sh1106_displayEv>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
  
  Buffer_CMD[1] = c;
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	7053      	strb	r3, [r2, #1]
  
  while(HAL_I2C_Master_Transmit(&hi2c1,_i2caddr,Buffer_CMD,0x02,0x10) != HAL_OK)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000af0:	b299      	uxth	r1, r3
 8000af2:	2310      	movs	r3, #16
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2302      	movs	r3, #2
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x48>)
 8000afc:	f001 fafc 	bl	80020f8 <HAL_I2C_Master_Transmit>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf14      	ite	ne
 8000b06:	2301      	movne	r3, #1
 8000b08:	2300      	moveq	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d000      	beq.n	8000b12 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x3a>
 8000b10:	e7eb      	b.n	8000aea <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x12>
  {

  }
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000724 	.word	0x20000724
 8000b20:	2000074c 	.word	0x2000074c

08000b24 <_ZN16Adafruit_SSD130611sh1106_dataEt>:

  }

}
void Adafruit_SSD1306::sh1106_data(uint16_t a)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint8_t empty_buffer[3] = {SSD1306_DATA, 0, 0};
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <_ZN16Adafruit_SSD130611sh1106_dataEt+0xc0>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	81bb      	strh	r3, [r7, #12]
 8000b36:	2300      	movs	r3, #0
 8000b38:	73bb      	strb	r3, [r7, #14]

    for(i = 0; i < 128 ; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0c      	blt.n	8000b60 <_ZN16Adafruit_SSD130611sh1106_dataEt+0x3c>
        Buffer_DATA_1106[i + 1] = buffer_sh1106[a + i];
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	441a      	add	r2, r3
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4925      	ldr	r1, [pc, #148]	; (8000be8 <_ZN16Adafruit_SSD130611sh1106_dataEt+0xc4>)
 8000b52:	5c89      	ldrb	r1, [r1, r2]
 8000b54:	4a25      	ldr	r2, [pc, #148]	; (8000bec <_ZN16Adafruit_SSD130611sh1106_dataEt+0xc8>)
 8000b56:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < 128 ; i++) {
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e7ee      	b.n	8000b3e <_ZN16Adafruit_SSD130611sh1106_dataEt+0x1a>
    }

    while(HAL_I2C_Master_Transmit(&hi2c1,_i2caddr, empty_buffer, 3, 0x10) != HAL_OK)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b66:	b299      	uxth	r1, r3
 8000b68:	f107 020c 	add.w	r2, r7, #12
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2303      	movs	r3, #3
 8000b72:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <_ZN16Adafruit_SSD130611sh1106_dataEt+0xcc>)
 8000b74:	f001 fac0 	bl	80020f8 <HAL_I2C_Master_Transmit>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf14      	ite	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	2300      	moveq	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d000      	beq.n	8000b8a <_ZN16Adafruit_SSD130611sh1106_dataEt+0x66>
 8000b88:	e7ea      	b.n	8000b60 <_ZN16Adafruit_SSD130611sh1106_dataEt+0x3c>
    {

    }

    while(HAL_I2C_Master_Transmit(&hi2c1,_i2caddr, Buffer_DATA_1106, 129, 0x10) != HAL_OK)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000b90:	b299      	uxth	r1, r3
 8000b92:	2310      	movs	r3, #16
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2381      	movs	r3, #129	; 0x81
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_ZN16Adafruit_SSD130611sh1106_dataEt+0xc8>)
 8000b9a:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <_ZN16Adafruit_SSD130611sh1106_dataEt+0xcc>)
 8000b9c:	f001 faac 	bl	80020f8 <HAL_I2C_Master_Transmit>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d000      	beq.n	8000bb2 <_ZN16Adafruit_SSD130611sh1106_dataEt+0x8e>
 8000bb0:	e7eb      	b.n	8000b8a <_ZN16Adafruit_SSD130611sh1106_dataEt+0x66>
    {

    }

    while(HAL_I2C_Master_Transmit(&hi2c1,_i2caddr, empty_buffer, 3, 0x10) != HAL_OK)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000bb8:	b299      	uxth	r1, r3
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <_ZN16Adafruit_SSD130611sh1106_dataEt+0xcc>)
 8000bc6:	f001 fa97 	bl	80020f8 <HAL_I2C_Master_Transmit>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf14      	ite	ne
 8000bd0:	2301      	movne	r3, #1
 8000bd2:	2300      	moveq	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d000      	beq.n	8000bdc <_ZN16Adafruit_SSD130611sh1106_dataEt+0xb8>
 8000bda:	e7ea      	b.n	8000bb2 <_ZN16Adafruit_SSD130611sh1106_dataEt+0x8e>
    {

    }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0800304c 	.word	0x0800304c
 8000be8:	20000284 	.word	0x20000284
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	2000074c 	.word	0x2000074c

08000bf4 <_ZN16Adafruit_SSD130614sh1106_displayEv>:
    {
    }
}

void Adafruit_SSD1306::sh1106_display(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 8; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	dc1b      	bgt.n	8000c3e <_ZN16Adafruit_SSD130614sh1106_displayEv+0x4a>
    {
        ssd1306_command(0xB0 + i); // page 0
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3b50      	subs	r3, #80	; 0x50
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff61 	bl	8000ad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
        ssd1306_command(0x00);     // column lower  0
 8000c16:	2100      	movs	r1, #0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff5d 	bl	8000ad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
        ssd1306_command(0x10);     // column higher 0
 8000c1e:	2110      	movs	r1, #16
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff59 	bl	8000ad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
        sh1106_data(128 * i);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	01db      	lsls	r3, r3, #7
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff77 	bl	8000b24 <_ZN16Adafruit_SSD130611sh1106_dataEt>
    for(int i = 0; i < 8; i++)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e7e0      	b.n	8000c00 <_ZN16Adafruit_SSD130614sh1106_displayEv+0xc>
    }
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
void Adafruit_SSD1306::clearDisplay_sh1106(void)
{
    memset(buffer_sh1106, 0, (132 * 64 / 8));
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8000c48:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000c4c:	b08d      	sub	sp, #52	; 0x34
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	4608      	mov	r0, r1
 8000c54:	4611      	mov	r1, r2
 8000c56:	461a      	mov	r2, r3
 8000c58:	4603      	mov	r3, r0
 8000c5a:	817b      	strh	r3, [r7, #10]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	813b      	strh	r3, [r7, #8]
 8000c60:	4613      	mov	r3, r2
 8000c62:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation) {
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	7d5b      	ldrb	r3, [r3, #21]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d855      	bhi.n	8000d1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000d1f 	.word	0x08000d1f
 8000c7c:	08000c89 	.word	0x08000c89
 8000c80:	08000cb1 	.word	0x08000cb1
 8000c84:	08000ce9 	.word	0x08000ce9
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000c92:	893b      	ldrh	r3, [r7, #8]
 8000c94:	817b      	strh	r3, [r7, #10]
 8000c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c98:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	897b      	ldrh	r3, [r7, #10]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	817b      	strh	r3, [r7, #10]
      break;
 8000cae:	e036      	b.n	8000d1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	897b      	ldrh	r3, [r7, #10]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	893b      	ldrh	r3, [r7, #8]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	813b      	strh	r3, [r7, #8]
      x -= (w-1);
 8000cd8:	897a      	ldrh	r2, [r7, #10]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	817b      	strh	r3, [r7, #10]
      break;
 8000ce6:	e01a      	b.n	8000d1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 8000cee:	897b      	ldrh	r3, [r7, #10]
 8000cf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000cf2:	893b      	ldrh	r3, [r7, #8]
 8000cf4:	817b      	strh	r3, [r7, #10]
 8000cf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cf8:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	893b      	ldrh	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	813b      	strh	r3, [r7, #8]
      y -= (w-1);
 8000d0e:	893a      	ldrh	r2, [r7, #8]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	813b      	strh	r3, [r7, #8]
      break;
 8000d1c:	bf00      	nop
  }

  if(bSwap) {
 8000d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 80cf 	beq.w	8000ec6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x27e>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	897b      	ldrh	r3, [r7, #10]
 8000d2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d30:	893b      	ldrh	r3, [r7, #8]
 8000d32:	843b      	strh	r3, [r7, #32]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	83fb      	strh	r3, [r7, #30]
 8000d38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000d3c:	83bb      	strh	r3, [r7, #28]


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 8000d3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f2c0 8153 	blt.w	8000fee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d4e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8000d52:	429a      	cmp	r2, r3
 8000d54:	f280 814b 	bge.w	8000fee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>

  // make sure we don't try to draw below 0
  if(__y < 0) {
 8000d58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da06      	bge.n	8000d6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x126>
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 8000d60:	8bfa      	ldrh	r2, [r7, #30]
 8000d62:	8c3b      	ldrh	r3, [r7, #32]
 8000d64:	4413      	add	r3, r2
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	83fb      	strh	r3, [r7, #30]
    __y = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	843b      	strh	r3, [r7, #32]

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
 8000d6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000d72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d76:	4413      	add	r3, r2
 8000d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	dd07      	ble.n	8000d92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    __h = (HEIGHT - __y);
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	8c3b      	ldrh	r3, [r7, #32]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	83fb      	strh	r3, [r7, #30]
  }

  // if our height is now negative, punt
  if(__h <= 0) {
 8000d92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f340 812b 	ble.w	8000ff2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3aa>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 8000d9c:	8c3b      	ldrh	r3, [r7, #32]
 8000d9e:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 8000da0:	8bfb      	ldrh	r3, [r7, #30]
 8000da2:	b2dd      	uxtb	r5, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
 8000da4:	4c9c      	ldr	r4, [pc, #624]	; (8001018 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 8000da6:	08f3      	lsrs	r3, r6, #3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	01db      	lsls	r3, r3, #7
 8000dac:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
 8000dae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000db2:	441c      	add	r4, r3

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
 8000db4:	f006 0307 	and.w	r3, r6, #7
 8000db8:	b2de      	uxtb	r6, r3
  if(mod) {
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d03b      	beq.n	8000e36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ee>
    // mask off the high n bits we want to set
    mod = 8-mod;
 8000dbe:	f1c6 0308 	rsb	r3, r6, #8
 8000dc2:	b2de      	uxtb	r6, r3

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	4b95      	ldr	r3, [pc, #596]	; (800101c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d4>)
 8000dc8:	f813 8002 	ldrb.w	r8, [r3, r2]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
 8000dcc:	42b5      	cmp	r5, r6
 8000dce:	d20c      	bcs.n	8000dea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
      mask &= (0XFF >> (mod-h));
 8000dd0:	4632      	mov	r2, r6
 8000dd2:	462b      	mov	r3, r5
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	fa42 f303 	asr.w	r3, r2, r3
 8000ddc:	b25a      	sxtb	r2, r3
 8000dde:	fa4f f388 	sxtb.w	r3, r8
 8000de2:	4013      	ands	r3, r2
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	fa5f f883 	uxtb.w	r8, r3
    }

  switch (color)
 8000dea:	8bbb      	ldrh	r3, [r7, #28]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d016      	beq.n	8000e1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1d6>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	dc1a      	bgt.n	8000e2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1c0>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d116      	bne.n	8000e2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    {
    case WHITE:   *pBuf |=  mask;  break;
 8000dfc:	7823      	ldrb	r3, [r4, #0]
 8000dfe:	ea43 0308 	orr.w	r3, r3, r8
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	7023      	strb	r3, [r4, #0]
 8000e06:	e010      	b.n	8000e2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case BLACK:   *pBuf &= ~mask;  break;
 8000e08:	7823      	ldrb	r3, [r4, #0]
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	fa4f f388 	sxtb.w	r3, r8
 8000e10:	43db      	mvns	r3, r3
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	7023      	strb	r3, [r4, #0]
 8000e1c:	e005      	b.n	8000e2a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case INVERSE: *pBuf ^=  mask;  break;
 8000e1e:	7823      	ldrb	r3, [r4, #0]
 8000e20:	ea88 0303 	eor.w	r3, r8, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7023      	strb	r3, [r4, #0]
 8000e28:	bf00      	nop
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 8000e2a:	42b5      	cmp	r5, r6
 8000e2c:	f0c0 80e3 	bcc.w	8000ff6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ae>

    h -= mod;
 8000e30:	1bab      	subs	r3, r5, r6
 8000e32:	b2dd      	uxtb	r5, r3

    pBuf += SSD1306_LCDWIDTH;
 8000e34:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
 8000e36:	2d07      	cmp	r5, #7
 8000e38:	d91d      	bls.n	8000e76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 8000e3a:	8bbb      	ldrh	r3, [r7, #28]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d10a      	bne.n	8000e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20e>
      do  {
      *pBuf=~(*pBuf);
 8000e40:	7823      	ldrb	r3, [r4, #0]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 8000e48:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 8000e4a:	f1a5 0308 	sub.w	r3, r5, #8
 8000e4e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8000e50:	2d07      	cmp	r5, #7
 8000e52:	d910      	bls.n	8000e76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do  {
 8000e54:	e7f4      	b.n	8000e40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1f8>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
 8000e56:	8bbb      	ldrh	r3, [r7, #28]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x218>
 8000e5c:	23ff      	movs	r3, #255	; 0xff
 8000e5e:	e000      	b.n	8000e62 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21a>
 8000e60:	2300      	movs	r3, #0
 8000e62:	461e      	mov	r6, r3

      do  {
        // write our value in
      *pBuf = val;
 8000e64:	4633      	mov	r3, r6
 8000e66:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 8000e68:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 8000e6a:	f1a5 0308 	sub.w	r3, r5, #8
 8000e6e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8000e70:	2d07      	cmp	r5, #7
 8000e72:	d900      	bls.n	8000e76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do  {
 8000e74:	e7f6      	b.n	8000e64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21c>
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	f000 80c8 	beq.w	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    mod = h & 7;
 8000e7c:	f005 0307 	and.w	r3, r5, #7
 8000e80:	b2de      	uxtb	r6, r3
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 8000e82:	4632      	mov	r2, r6
 8000e84:	4b66      	ldr	r3, [pc, #408]	; (8001020 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d8>)
 8000e86:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 8000e88:	8bbb      	ldrh	r3, [r7, #28]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d016      	beq.n	8000ebc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x274>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	f300 80bc 	bgt.w	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x260>
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	f040 80b7 	bne.w	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    {
      case WHITE:   *pBuf |=  mask;  break;
 8000e9e:	7823      	ldrb	r3, [r4, #0]
 8000ea0:	432b      	orrs	r3, r5
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	7023      	strb	r3, [r4, #0]
 8000ea6:	e0b1      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case BLACK:   *pBuf &= ~mask;  break;
 8000ea8:	7823      	ldrb	r3, [r4, #0]
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	b26b      	sxtb	r3, r5
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	7023      	strb	r3, [r4, #0]
 8000eba:	e0a7      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case INVERSE: *pBuf ^=  mask;  break;
 8000ebc:	7823      	ldrb	r3, [r4, #0]
 8000ebe:	406b      	eors	r3, r5
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	7023      	strb	r3, [r4, #0]
 8000ec4:	e0a2      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	897b      	ldrh	r3, [r7, #10]
 8000ecc:	82fb      	strh	r3, [r7, #22]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	82bb      	strh	r3, [r7, #20]
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	827b      	strh	r3, [r7, #18]
 8000ed6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000eda:	823b      	strh	r3, [r7, #16]
  if(y < 0 || y >= HEIGHT) { return; }
 8000edc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f2c0 808a 	blt.w	8000ffa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000eec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f280 8082 	bge.w	8000ffa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
  if(x < 0) {
 8000ef6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	da06      	bge.n	8000f0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2c4>
    w += x;
 8000efe:	8a7a      	ldrh	r2, [r7, #18]
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	827b      	strh	r3, [r7, #18]
    x = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	82fb      	strh	r3, [r7, #22]
  if( (x + w) > WIDTH) {
 8000f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f14:	4413      	add	r3, r2
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	dd07      	ble.n	8000f30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2e8>
    w = (WIDTH - x);
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	827b      	strh	r3, [r7, #18]
  if(w <= 0) { return; }
 8000f30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd62      	ble.n	8000ffe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b6>
  register uint8_t *pBuf = buffer;
 8000f38:	4c37      	ldr	r4, [pc, #220]	; (8001018 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 8000f3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2fc>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	441c      	add	r4, r3
  pBuf += x;
 8000f4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f50:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 8000f52:	8abb      	ldrh	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	b2dd      	uxtb	r5, r3
  switch (color)
 8000f60:	8a3b      	ldrh	r3, [r7, #16]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d02f      	beq.n	8000fc6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	dc50      	bgt.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d015      	beq.n	8000f9a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x352>
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d14c      	bne.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8000f72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	3a01      	subs	r2, #1
 8000f7a:	b292      	uxth	r2, r2
 8000f7c:	827a      	strh	r2, [r7, #18]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d03a      	beq.n	8001002 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	1c5c      	adds	r4, r3, #1
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	432a      	orrs	r2, r5
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e7eb      	b.n	8000f72 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32a>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8000f9a:	43eb      	mvns	r3, r5
 8000f9c:	b2dd      	uxtb	r5, r3
 8000f9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	827a      	strh	r2, [r7, #18]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d026      	beq.n	8001006 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3be>
 8000fb8:	4623      	mov	r3, r4
 8000fba:	1c5c      	adds	r4, r3, #1
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	402a      	ands	r2, r5
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e7eb      	b.n	8000f9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x356>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 8000fc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	827a      	strh	r2, [r7, #18]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d014      	beq.n	800100a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c2>
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	1c5c      	adds	r4, r3, #1
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	406a      	eors	r2, r5
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e7eb      	b.n	8000fc6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
  if(x < 0 || x >= WIDTH) { return; }
 8000fee:	bf00      	nop
 8000ff0:	e00c      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    return;
 8000ff2:	bf00      	nop
 8000ff4:	e00a      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    if(h<mod) { return; }
 8000ff6:	bf00      	nop
 8000ff8:	e008      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(y < 0 || y >= HEIGHT) { return; }
 8000ffa:	bf00      	nop
 8000ffc:	e006      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(w <= 0) { return; }
 8000ffe:	bf00      	nop
 8001000:	e004      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8001002:	bf00      	nop
 8001004:	e002      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 800100a:	bf00      	nop
}
 800100c:	bf00      	nop
 800100e:	3734      	adds	r7, #52	; 0x34
 8001010:	46bd      	mov	sp, r7
 8001012:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001016:	4770      	bx	lr
 8001018:	20000084 	.word	0x20000084
 800101c:	20000684 	.word	0x20000684
 8001020:	2000068c 	.word	0x2000068c

08001024 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001024:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001028:	b08d      	sub	sp, #52	; 0x34
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4603      	mov	r3, r0
 8001036:	817b      	strh	r3, [r7, #10]
 8001038:	460b      	mov	r3, r1
 800103a:	813b      	strh	r3, [r7, #8]
 800103c:	4613      	mov	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	7d5b      	ldrb	r3, [r3, #21]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d855      	bhi.n	80010fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	080010fb 	.word	0x080010fb
 8001058:	08001065 	.word	0x08001065
 800105c:	0800109b 	.word	0x0800109b
 8001060:	080010d3 	.word	0x080010d3
      bSwap = true;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	817b      	strh	r3, [r7, #10]
 8001072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001074:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107c:	b29a      	uxth	r2, r3
 800107e:	897b      	ldrh	r3, [r7, #10]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	b29b      	uxth	r3, r3
 8001088:	817b      	strh	r3, [r7, #10]
      x -= (h-1);
 800108a:	897a      	ldrh	r2, [r7, #10]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	817b      	strh	r3, [r7, #10]
      break;
 8001098:	e02f      	b.n	80010fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      x = WIDTH - x - 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	893b      	ldrh	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	3b01      	subs	r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	813b      	strh	r3, [r7, #8]
      y -= (h-1);
 80010c2:	893a      	ldrh	r2, [r7, #8]
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	3301      	adds	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	813b      	strh	r3, [r7, #8]
      break;
 80010d0:	e013      	b.n	80010fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      bSwap = true;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 80010d8:	897b      	ldrh	r3, [r7, #10]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	817b      	strh	r3, [r7, #10]
 80010e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010e2:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	893b      	ldrh	r3, [r7, #8]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	813b      	strh	r3, [r7, #8]
      break;
 80010f8:	bf00      	nop
  if(bSwap) {
 80010fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 809a 	beq.w	8001238 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x214>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	847b      	strh	r3, [r7, #34]	; 0x22
 800110c:	893b      	ldrh	r3, [r7, #8]
 800110e:	843b      	strh	r3, [r7, #32]
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	83fb      	strh	r3, [r7, #30]
 8001114:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001118:	83bb      	strh	r3, [r7, #28]
  if(y < 0 || y >= HEIGHT) { return; }
 800111a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f2c0 8155 	blt.w	80013ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800112a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800112e:	429a      	cmp	r2, r3
 8001130:	f280 814d 	bge.w	80013ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
  if(x < 0) {
 8001134:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001138:	2b00      	cmp	r3, #0
 800113a:	da06      	bge.n	800114a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x126>
    w += x;
 800113c:	8bfa      	ldrh	r2, [r7, #30]
 800113e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	83fb      	strh	r3, [r7, #30]
    x = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	847b      	strh	r3, [r7, #34]	; 0x22
  if( (x + w) > WIDTH) {
 800114a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800114e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001152:	4413      	add	r3, r2
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115a:	4293      	cmp	r3, r2
 800115c:	dd07      	ble.n	800116e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    w = (WIDTH - x);
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001164:	b29a      	uxth	r2, r3
 8001166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	83fb      	strh	r3, [r7, #30]
  if(w <= 0) { return; }
 800116e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f340 812d 	ble.w	80013d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ae>
  register uint8_t *pBuf = buffer;
 8001178:	4c9f      	ldr	r4, [pc, #636]	; (80013f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 800117a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	b21b      	sxth	r3, r3
 8001188:	01db      	lsls	r3, r3, #7
 800118a:	441c      	add	r4, r3
  pBuf += x;
 800118c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001190:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 8001192:	8c3b      	ldrh	r3, [r7, #32]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	2201      	movs	r2, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	b2dd      	uxtb	r5, r3
  switch (color)
 80011a0:	8bbb      	ldrh	r3, [r7, #28]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d033      	beq.n	800120e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	f300 8120 	bgt.w	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d017      	beq.n	80011e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1bc>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 811b 	bne.w	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 80011b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	3a01      	subs	r2, #1
 80011be:	b292      	uxth	r2, r2
 80011c0:	83fa      	strh	r2, [r7, #30]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8102 	beq.w	80013d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b2>
 80011d2:	4623      	mov	r3, r4
 80011d4:	1c5c      	adds	r4, r3, #1
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	432a      	orrs	r2, r5
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e7ea      	b.n	80011b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x192>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 80011e0:	43eb      	mvns	r3, r5
 80011e2:	b2dd      	uxtb	r5, r3
 80011e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	3a01      	subs	r2, #1
 80011ec:	b292      	uxth	r2, r2
 80011ee:	83fa      	strh	r2, [r7, #30]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80ed 	beq.w	80013da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b6>
 8001200:	4623      	mov	r3, r4
 8001202:	1c5c      	adds	r4, r3, #1
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	402a      	ands	r2, r5
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e7ea      	b.n	80011e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c0>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 800120e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001212:	b29a      	uxth	r2, r3
 8001214:	3a01      	subs	r2, #1
 8001216:	b292      	uxth	r2, r2
 8001218:	83fa      	strh	r2, [r7, #30]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80da 	beq.w	80013de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ba>
 800122a:	4623      	mov	r3, r4
 800122c:	1c5c      	adds	r4, r3, #1
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	406a      	eors	r2, r5
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e7ea      	b.n	800120e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	82fb      	strh	r3, [r7, #22]
 8001240:	893b      	ldrh	r3, [r7, #8]
 8001242:	82bb      	strh	r3, [r7, #20]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	827b      	strh	r3, [r7, #18]
 8001248:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800124c:	823b      	strh	r3, [r7, #16]
  if(x < 0 || x >= WIDTH) { return; }
 800124e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f2c0 80c5 	blt.w	80013e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800125e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001262:	429a      	cmp	r2, r3
 8001264:	f280 80bd 	bge.w	80013e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
  if(__y < 0) {
 8001268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	da06      	bge.n	800127e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x25a>
    __h += __y;
 8001270:	8a7a      	ldrh	r2, [r7, #18]
 8001272:	8abb      	ldrh	r3, [r7, #20]
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	827b      	strh	r3, [r7, #18]
    __y = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	82bb      	strh	r3, [r7, #20]
  if( (__y + __h) > HEIGHT) {
 800127e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001282:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001286:	4413      	add	r3, r2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800128e:	4293      	cmp	r3, r2
 8001290:	dd07      	ble.n	80012a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x27e>
    __h = (HEIGHT - __y);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001298:	b29a      	uxth	r2, r3
 800129a:	8abb      	ldrh	r3, [r7, #20]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	827b      	strh	r3, [r7, #18]
  if(__h <= 0) {
 80012a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f340 809d 	ble.w	80013e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c2>
  register uint8_t y = __y;
 80012ac:	8abb      	ldrh	r3, [r7, #20]
 80012ae:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 80012b0:	8a7b      	ldrh	r3, [r7, #18]
 80012b2:	b2dd      	uxtb	r5, r3
  register uint8_t *pBuf = buffer;
 80012b4:	4c50      	ldr	r4, [pc, #320]	; (80013f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 80012b6:	08f3      	lsrs	r3, r6, #3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	441c      	add	r4, r3
  pBuf += x;
 80012be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c2:	441c      	add	r4, r3
  register uint8_t mod = (y&7);
 80012c4:	f006 0307 	and.w	r3, r6, #7
 80012c8:	b2de      	uxtb	r6, r3
  if(mod) {
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d03a      	beq.n	8001344 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x320>
    mod = 8-mod;
 80012ce:	f1c6 0308 	rsb	r3, r6, #8
 80012d2:	b2de      	uxtb	r6, r3
    register uint8_t mask = premask[mod];
 80012d4:	4632      	mov	r2, r6
 80012d6:	4b49      	ldr	r3, [pc, #292]	; (80013fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d8>)
 80012d8:	f813 8002 	ldrb.w	r8, [r3, r2]
    if( h < mod) {
 80012dc:	42b5      	cmp	r5, r6
 80012de:	d20c      	bcs.n	80012fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2d6>
      mask &= (0XFF >> (mod-h));
 80012e0:	4632      	mov	r2, r6
 80012e2:	462b      	mov	r3, r5
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	22ff      	movs	r2, #255	; 0xff
 80012e8:	fa42 f303 	asr.w	r3, r2, r3
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	fa4f f388 	sxtb.w	r3, r8
 80012f2:	4013      	ands	r3, r2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	fa5f f883 	uxtb.w	r8, r3
  switch (color)
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d016      	beq.n	800132e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30a>
 8001300:	2b02      	cmp	r3, #2
 8001302:	dc1a      	bgt.n	800133a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2f4>
 8001308:	2b01      	cmp	r3, #1
 800130a:	d116      	bne.n	800133a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case WHITE:   *pBuf |=  mask;  break;
 800130c:	7823      	ldrb	r3, [r4, #0]
 800130e:	ea43 0308 	orr.w	r3, r3, r8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	7023      	strb	r3, [r4, #0]
 8001316:	e010      	b.n	800133a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case BLACK:   *pBuf &= ~mask;  break;
 8001318:	7823      	ldrb	r3, [r4, #0]
 800131a:	b25a      	sxtb	r2, r3
 800131c:	fa4f f388 	sxtb.w	r3, r8
 8001320:	43db      	mvns	r3, r3
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4013      	ands	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	7023      	strb	r3, [r4, #0]
 800132c:	e005      	b.n	800133a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case INVERSE: *pBuf ^=  mask;  break;
 800132e:	7823      	ldrb	r3, [r4, #0]
 8001330:	ea88 0303 	eor.w	r3, r8, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	7023      	strb	r3, [r4, #0]
 8001338:	bf00      	nop
    if(h<mod) { return; }
 800133a:	42b5      	cmp	r5, r6
 800133c:	d355      	bcc.n	80013ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c6>
    h -= mod;
 800133e:	1bab      	subs	r3, r5, r6
 8001340:	b2dd      	uxtb	r5, r3
    pBuf += SSD1306_LCDWIDTH;
 8001342:	3480      	adds	r4, #128	; 0x80
  if(h >= 8) {
 8001344:	2d07      	cmp	r5, #7
 8001346:	d91d      	bls.n	8001384 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
 8001348:	8a3b      	ldrh	r3, [r7, #16]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d10a      	bne.n	8001364 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x340>
      *pBuf=~(*pBuf);
 800134e:	7823      	ldrb	r3, [r4, #0]
 8001350:	43db      	mvns	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 8001356:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 8001358:	f1a5 0308 	sub.w	r3, r5, #8
 800135c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 800135e:	2d07      	cmp	r5, #7
 8001360:	d910      	bls.n	8001384 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do  {
 8001362:	e7f4      	b.n	800134e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x32a>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 8001364:	8a3b      	ldrh	r3, [r7, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34a>
 800136a:	23ff      	movs	r3, #255	; 0xff
 800136c:	e000      	b.n	8001370 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34c>
 800136e:	2300      	movs	r3, #0
 8001370:	461e      	mov	r6, r3
      *pBuf = val;
 8001372:	4633      	mov	r3, r6
 8001374:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 8001376:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 8001378:	f1a5 0308 	sub.w	r3, r5, #8
 800137c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 800137e:	2d07      	cmp	r5, #7
 8001380:	d900      	bls.n	8001384 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do  {
 8001382:	e7f6      	b.n	8001372 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34e>
  if(h) {
 8001384:	2d00      	cmp	r5, #0
 8001386:	d031      	beq.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    mod = h & 7;
 8001388:	f005 0307 	and.w	r3, r5, #7
 800138c:	b2de      	uxtb	r6, r3
    register uint8_t mask = postmask[mod];
 800138e:	4632      	mov	r2, r6
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3dc>)
 8001392:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 8001394:	8a3b      	ldrh	r3, [r7, #16]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d014      	beq.n	80013c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a0>
 800139a:	2b02      	cmp	r3, #2
 800139c:	dc26      	bgt.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38c>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d122      	bne.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case WHITE:   *pBuf |=  mask;  break;
 80013a6:	7823      	ldrb	r3, [r4, #0]
 80013a8:	432b      	orrs	r3, r5
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	7023      	strb	r3, [r4, #0]
 80013ae:	e01d      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case BLACK:   *pBuf &= ~mask;  break;
 80013b0:	7823      	ldrb	r3, [r4, #0]
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	b26b      	sxtb	r3, r5
 80013b6:	43db      	mvns	r3, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	7023      	strb	r3, [r4, #0]
 80013c2:	e013      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case INVERSE: *pBuf ^=  mask;  break;
 80013c4:	7823      	ldrb	r3, [r4, #0]
 80013c6:	406b      	eors	r3, r5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	7023      	strb	r3, [r4, #0]
 80013cc:	e00e      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(y < 0 || y >= HEIGHT) { return; }
 80013ce:	bf00      	nop
 80013d0:	e00c      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(w <= 0) { return; }
 80013d2:	bf00      	nop
 80013d4:	e00a      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 80013d6:	bf00      	nop
 80013d8:	e008      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 80013da:	bf00      	nop
 80013dc:	e006      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 80013de:	bf00      	nop
 80013e0:	e004      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(x < 0 || x >= WIDTH) { return; }
 80013e2:	bf00      	nop
 80013e4:	e002      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    return;
 80013e6:	bf00      	nop
 80013e8:	e000      	b.n	80013ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    if(h<mod) { return; }
 80013ea:	bf00      	nop
}
 80013ec:	bf00      	nop
 80013ee:	3734      	adds	r7, #52	; 0x34
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80013f6:	4770      	bx	lr
 80013f8:	20000084 	.word	0x20000084
 80013fc:	20000684 	.word	0x20000684
 8001400:	2000068c 	.word	0x2000068c

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_GPIO_Init+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <MX_GPIO_Init+0x90>)
 800141e:	f043 0320 	orr.w	r3, r3, #32
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_GPIO_Init+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_GPIO_Init+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <MX_GPIO_Init+0x90>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_GPIO_Init+0x90>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_GPIO_Init+0x90>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <MX_GPIO_Init+0x90>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_GPIO_Init+0x90>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RESET_Pin|D_C_Pin|CS_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f241 0138 	movw	r1, #4152	; 0x1038
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0x94>)
 8001468:	f000 fcd0 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin|D_C_Pin|CS_Pin;
 800146c:	f241 0338 	movw	r3, #4152	; 0x1038
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2302      	movs	r3, #2
 800147c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_GPIO_Init+0x94>)
 8001486:	f000 fb3d 	bl	8001b04 <HAL_GPIO_Init>

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00

0800149c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_Init+0x50>)
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <MX_I2C1_Init+0x54>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_Init+0x50>)
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_I2C1_Init+0x58>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_I2C1_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_I2C1_Init+0x50>)
 80014ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_I2C1_Init+0x50>)
 80014da:	f000 fcc9 	bl	8001e70 <HAL_I2C_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014e4:	f000 f8d9 	bl	800169a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000074c 	.word	0x2000074c
 80014f0:	40005400 	.word	0x40005400
 80014f4:	000186a0 	.word	0x000186a0

080014f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_I2C_MspInit+0x70>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d123      	bne.n	8001560 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_I2C_MspInit+0x74>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_I2C_MspInit+0x74>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_I2C_MspInit+0x74>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <HAL_I2C_MspInit+0x78>)
 8001544:	f000 fade 	bl	8001b04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_I2C_MspInit+0x74>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_I2C_MspInit+0x74>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_I2C_MspInit+0x74>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40005400 	.word	0x40005400
 800156c:	40021000 	.word	0x40021000
 8001570:	40010c00 	.word	0x40010c00

08001574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800157a:	f000 f959 	bl	8001830 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800157e:	f000 f83d 	bl	80015fc <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001582:	f7ff ff3f 	bl	8001404 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001586:	f7ff ff89 	bl	800149c <MX_I2C1_Init>

    /* USER CODE BEGIN 2 */


//    // 1.3 inch
    display.sh1106_begin(SSD1306_SWITCHCAPVCC, 0x7A);
 800158a:	2301      	movs	r3, #1
 800158c:	227a      	movs	r2, #122	; 0x7a
 800158e:	2102      	movs	r1, #2
 8001590:	4817      	ldr	r0, [pc, #92]	; (80015f0 <main+0x7c>)
 8001592:	f7ff fa55 	bl	8000a40 <_ZN16Adafruit_SSD130612sh1106_beginEhhb>
    HAL_Delay(3000);
 8001596:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800159a:	f000 f9ab 	bl	80018f4 <HAL_Delay>

    uint32_t mil = HAL_GetTick();
 800159e:	f000 f99f 	bl	80018e0 <HAL_GetTick>
 80015a2:	6078      	str	r0, [r7, #4]
    while (1)
    {
/* USER CODE END WHILE */

/* USER CODE BEGIN 3 */
        if(HAL_GetTick() - mil > 100)
 80015a4:	f000 f99c 	bl	80018e0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	bf8c      	ite	hi
 80015b2:	2301      	movhi	r3, #1
 80015b4:	2300      	movls	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f3      	beq.n	80015a4 <main+0x30>
        {
            mil = HAL_GetTick();
 80015bc:	f000 f990 	bl	80018e0 <HAL_GetTick>
 80015c0:	6078      	str	r0, [r7, #4]
            static uint32_t count = 0;
            if(++count > 10)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <main+0x80>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <main+0x80>)
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <main+0x80>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b0a      	cmp	r3, #10
 80015d2:	bf8c      	ite	hi
 80015d4:	2301      	movhi	r3, #1
 80015d6:	2300      	movls	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0e2      	beq.n	80015a4 <main+0x30>
            {
                count = 0;
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <main+0x80>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80015e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <main+0x84>)
 80015ea:	f000 fc27 	bl	8001e3c <HAL_GPIO_TogglePin>
            }
        }
    }
 80015ee:	e7d9      	b.n	80015a4 <main+0x30>
 80015f0:	20000728 	.word	0x20000728
 80015f4:	20000748 	.word	0x20000748
 80015f8:	40010c00 	.word	0x40010c00

080015fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2228      	movs	r2, #40	; 0x28
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fcc6 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	2301      	movs	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800163a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800163e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f85d 	bl	8002704 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800165a:	f000 f81e 	bl	800169a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2102      	movs	r1, #2
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fac3 	bl	8002c04 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800168e:	f000 f804 	bl	800169a <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3740      	adds	r7, #64	; 0x40
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169e:	b672      	cpsid	i
}
 80016a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <Error_Handler+0x8>

080016a4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d103      	bne.n	80016c6 <_Z41__static_initialization_and_destruction_0ii+0x22>
Adafruit_SSD1306 display(OLED_RESET);
 80016be:	2100      	movs	r1, #0
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80016c2:	f7ff f991 	bl	80009e8 <_ZN16Adafruit_SSD1306C1Ea>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000728 	.word	0x20000728

080016d4 <_GLOBAL__sub_I_display>:
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff ffe1 	bl	80016a4 <_Z41__static_initialization_and_destruction_0ii>
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f895 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
	return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ae:	f001 fbcb 	bl	8002f48 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
	return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017e6:	e003      	b.n	80017f0 <LoopCopyDataInit>

080017e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ee:	3104      	adds	r1, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017f0:	480a      	ldr	r0, [pc, #40]	; (800181c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017f8:	d3f6      	bcc.n	80017e8 <CopyDataInit>
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017fc:	e002      	b.n	8001804 <LoopFillZerobss>

080017fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001800:	f842 3b04 	str.w	r3, [r2], #4

08001804 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001808:	d3f9      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff ffe5 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f001 fba1 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff feaf 	bl	8001574 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r3, =_sidata
 8001818:	080035d0 	.word	0x080035d0
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001820:	20000708 	.word	0x20000708
  ldr r2, =_sbss
 8001824:	20000708 	.word	0x20000708
  ldr r3, = _ebss
 8001828:	200007a8 	.word	0x200007a8

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f92b 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff ff4a 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f935 	bl	8001aea <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f90b 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000694 	.word	0x20000694
 80018b4:	2000069c 	.word	0x2000069c
 80018b8:	20000698 	.word	0x20000698

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	2000069c 	.word	0x2000069c
 80018dc:	200007a0 	.word	0x200007a0

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	200007a0 	.word	0x200007a0

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffe0 	bl	80018e0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000069c 	.word	0x2000069c

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff49 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff5e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb0 	bl	8001a58 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b08b      	sub	sp, #44	; 0x2c
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b16:	e169      	b.n	8001dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8158 	bne.w	8001de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a9a      	ldr	r2, [pc, #616]	; (8001da4 <HAL_GPIO_Init+0x2a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d05e      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b40:	4a98      	ldr	r2, [pc, #608]	; (8001da4 <HAL_GPIO_Init+0x2a0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d875      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b46:	4a98      	ldr	r2, [pc, #608]	; (8001da8 <HAL_GPIO_Init+0x2a4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d058      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b4c:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_GPIO_Init+0x2a4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d86f      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b52:	4a96      	ldr	r2, [pc, #600]	; (8001dac <HAL_GPIO_Init+0x2a8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d052      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b58:	4a94      	ldr	r2, [pc, #592]	; (8001dac <HAL_GPIO_Init+0x2a8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d869      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b5e:	4a94      	ldr	r2, [pc, #592]	; (8001db0 <HAL_GPIO_Init+0x2ac>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04c      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b64:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_GPIO_Init+0x2ac>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d863      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b6a:	4a92      	ldr	r2, [pc, #584]	; (8001db4 <HAL_GPIO_Init+0x2b0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d046      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b70:	4a90      	ldr	r2, [pc, #576]	; (8001db4 <HAL_GPIO_Init+0x2b0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d85d      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d82a      	bhi.n	8001bd0 <HAL_GPIO_Init+0xcc>
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d859      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <HAL_GPIO_Init+0x80>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001bff 	.word	0x08001bff
 8001b88:	08001bd9 	.word	0x08001bd9
 8001b8c:	08001beb 	.word	0x08001beb
 8001b90:	08001c2d 	.word	0x08001c2d
 8001b94:	08001c33 	.word	0x08001c33
 8001b98:	08001c33 	.word	0x08001c33
 8001b9c:	08001c33 	.word	0x08001c33
 8001ba0:	08001c33 	.word	0x08001c33
 8001ba4:	08001c33 	.word	0x08001c33
 8001ba8:	08001c33 	.word	0x08001c33
 8001bac:	08001c33 	.word	0x08001c33
 8001bb0:	08001c33 	.word	0x08001c33
 8001bb4:	08001c33 	.word	0x08001c33
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c33 	.word	0x08001c33
 8001bc0:	08001c33 	.word	0x08001c33
 8001bc4:	08001c33 	.word	0x08001c33
 8001bc8:	08001be1 	.word	0x08001be1
 8001bcc:	08001bf5 	.word	0x08001bf5
 8001bd0:	4a79      	ldr	r2, [pc, #484]	; (8001db8 <HAL_GPIO_Init+0x2b4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd6:	e02c      	b.n	8001c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e029      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e024      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e01f      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e01a      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c06:	2304      	movs	r3, #4
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e013      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	611a      	str	r2, [r3, #16]
          break;
 8001c1e:	e009      	b.n	8001c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	615a      	str	r2, [r3, #20]
          break;
 8001c2a:	e003      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          break;
 8001c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d801      	bhi.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	e001      	b.n	8001c42 <HAL_GPIO_Init+0x13e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3304      	adds	r3, #4
 8001c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2bff      	cmp	r3, #255	; 0xff
 8001c48:	d802      	bhi.n	8001c50 <HAL_GPIO_Init+0x14c>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x152>
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	3b08      	subs	r3, #8
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	401a      	ands	r2, r3
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80b1 	beq.w	8001de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c9c:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_GPIO_Init+0x2bc>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_GPIO_Init+0x2c0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_GPIO_Init+0x2c4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00d      	beq.n	8001cec <HAL_GPIO_Init+0x1e8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <HAL_GPIO_Init+0x2c8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a3d      	ldr	r2, [pc, #244]	; (8001dd0 <HAL_GPIO_Init+0x2cc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_Init+0x1e0>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	e004      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d02:	492f      	ldr	r1, [pc, #188]	; (8001dc0 <HAL_GPIO_Init+0x2bc>)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4928      	ldr	r1, [pc, #160]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d44:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	491e      	ldr	r1, [pc, #120]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4914      	ldr	r1, [pc, #80]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d021      	beq.n	8001dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e021      	b.n	8001de6 <HAL_GPIO_Init+0x2e2>
 8001da2:	bf00      	nop
 8001da4:	10320000 	.word	0x10320000
 8001da8:	10310000 	.word	0x10310000
 8001dac:	10220000 	.word	0x10220000
 8001db0:	10210000 	.word	0x10210000
 8001db4:	10120000 	.word	0x10120000
 8001db8:	10110000 	.word	0x10110000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	40011000 	.word	0x40011000
 8001dd0:	40011400 	.word	0x40011400
 8001dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4909      	ldr	r1, [pc, #36]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f ae8e 	bne.w	8001b18 <HAL_GPIO_Init+0x14>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	372c      	adds	r7, #44	; 0x2c
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43d9      	mvns	r1, r3
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	611a      	str	r2, [r3, #16]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12b      	b.n	80020da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fb2e 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed4:	f000 ffea 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a81      	ldr	r2, [pc, #516]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d807      	bhi.n	8001ef4 <HAL_I2C_Init+0x84>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_I2C_Init+0x278>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e006      	b.n	8001f02 <HAL_I2C_Init+0x92>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_I2C_Init+0x27c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e7      	b.n	80020da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	; (80020f0 <HAL_I2C_Init+0x280>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0c9b      	lsrs	r3, r3, #18
 8001f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d802      	bhi.n	8001f44 <HAL_I2C_Init+0xd4>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	e009      	b.n	8001f58 <HAL_I2C_Init+0xe8>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <HAL_I2C_Init+0x284>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	495c      	ldr	r1, [pc, #368]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d819      	bhi.n	8001fac <HAL_I2C_Init+0x13c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e59      	subs	r1, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_I2C_Init+0x138>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e59      	subs	r1, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	e051      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e04f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_I2C_Init+0x168>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e012      	b.n	8001ffe <HAL_I2C_Init+0x18e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	0099      	lsls	r1, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Init+0x196>
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <HAL_I2C_Init+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e58      	subs	r0, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e00f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6911      	ldr	r1, [r2, #16]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	000186a0 	.word	0x000186a0
 80020e8:	001e847f 	.word	0x001e847f
 80020ec:	003d08ff 	.word	0x003d08ff
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fbe8 	bl	80018e0 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	f040 80e0 	bne.w	80022e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2319      	movs	r3, #25
 8002126:	2201      	movs	r2, #1
 8002128:	4970      	ldr	r1, [pc, #448]	; (80022ec <HAL_I2C_Master_Transmit+0x1f4>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f964 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e0d3      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x50>
 8002144:	2302      	movs	r3, #2
 8002146:	e0cc      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d007      	beq.n	800216e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2210      	movs	r2, #16
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f89c 	bl	80022f4 <I2C_MasterRequestWrite>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08d      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021dc:	e066      	b.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f9de 	bl	80025a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d11b      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x188>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6a39      	ldr	r1, [r7, #32]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f9ce 	bl	8002626 <I2C_WaitOnBTFFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2b04      	cmp	r3, #4
 8002296:	d107      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e01a      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d194      	bne.n	80021de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	00100002 	.word	0x00100002
 80022f0:	ffff0000 	.word	0xffff0000

080022f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d006      	beq.n	800231e <I2C_MasterRequestWrite+0x2a>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <I2C_MasterRequestWrite+0x2a>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231c:	d108      	bne.n	8002330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e00b      	b.n	8002348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2b12      	cmp	r3, #18
 8002336:	d107      	bne.n	8002348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f84f 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236e:	d103      	bne.n	8002378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e035      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002384:	d108      	bne.n	8002398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	e01b      	b.n	80023d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002398:	897b      	ldrh	r3, [r7, #10]
 800239a:	11db      	asrs	r3, r3, #7
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0306 	and.w	r3, r3, #6
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f063 030f 	orn	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	490e      	ldr	r1, [pc, #56]	; (80023f0 <I2C_MasterRequestWrite+0xfc>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f875 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e010      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c6:	897b      	ldrh	r3, [r7, #10]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <I2C_MasterRequestWrite+0x100>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f865 	bl	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	00010008 	.word	0x00010008
 80023f4:	00010002 	.word	0x00010002

080023f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	e025      	b.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d021      	beq.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002412:	f7ff fa65 	bl	80018e0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d302      	bcc.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e023      	b.n	800249e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	e00c      	b.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d0b6      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b4:	e051      	b.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d123      	bne.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e046      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d021      	beq.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7ff f9e3 	bl	80018e0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d116      	bne.n	800255a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e020      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10c      	bne.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e00b      	b.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	43da      	mvns	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d18d      	bne.n	80024b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b0:	e02d      	b.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f878 	bl	80026a8 <I2C_IsAcknowledgeFailed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02d      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d021      	beq.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f989 	bl	80018e0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d1ca      	bne.n	80025b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002632:	e02d      	b.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f837 	bl	80026a8 <I2C_IsAcknowledgeFailed>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02d      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d021      	beq.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff f948 	bl	80018e0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e007      	b.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d1ca      	bne.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d11b      	bne.n	80026f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e26c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002724:	4b92      	ldr	r3, [pc, #584]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b04      	cmp	r3, #4
 800272e:	d00c      	beq.n	800274a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002730:	4b8f      	ldr	r3, [pc, #572]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d112      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
 800273c:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274a:	4b89      	ldr	r3, [pc, #548]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d06c      	beq.n	8002830 <HAL_RCC_OscConfig+0x12c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d168      	bne.n	8002830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e246      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x76>
 800276c:	4b80      	ldr	r3, [pc, #512]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e02e      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7a      	ldr	r2, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b78      	ldr	r3, [pc, #480]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a77      	ldr	r2, [pc, #476]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xbc>
 80027a6:	4b72      	ldr	r3, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a71      	ldr	r2, [pc, #452]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 80027c0:	4b6b      	ldr	r3, [pc, #428]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f87e 	bl	80018e0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f87a 	bl	80018e0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1fa      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe4>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f86a 	bl	80018e0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f866 	bl	80018e0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1e6      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x10c>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283e:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x18c>
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x176>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1ba      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4939      	ldr	r1, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_OscConfig+0x270>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff f81f 	bl	80018e0 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7ff f81b 	bl	80018e0 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e19b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4927      	ldr	r1, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_RCC_OscConfig+0x270>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fffe 	bl	80018e0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fffa 	bl	80018e0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e17a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03a      	beq.n	8002988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d019      	beq.n	800294e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x274>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002920:	f7fe ffde 	bl	80018e0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe ffda 	bl	80018e0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e15a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002946:	2001      	movs	r0, #1
 8002948:	f000 fac4 	bl	8002ed4 <RCC_Delay>
 800294c:	e01c      	b.n	8002988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_RCC_OscConfig+0x274>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7fe ffc4 	bl	80018e0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295a:	e00f      	b.n	800297c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe ffc0 	bl	80018e0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d908      	bls.n	800297c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e140      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	42420000 	.word	0x42420000
 8002978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b9e      	ldr	r3, [pc, #632]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e9      	bne.n	800295c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a6 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b97      	ldr	r3, [pc, #604]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a93      	ldr	r2, [pc, #588]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	61d3      	str	r3, [r2, #28]
 80029b2:	4b91      	ldr	r3, [pc, #580]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b8e      	ldr	r3, [pc, #568]	; (8002bfc <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe ff81 	bl	80018e0 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe ff7d 	bl	80018e0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0fd      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x312>
 8002a08:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a7a      	ldr	r2, [pc, #488]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e02d      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x334>
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a72      	ldr	r2, [pc, #456]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	e01c      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x356>
 8002a40:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a6c      	ldr	r2, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a69      	ldr	r2, [pc, #420]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a66      	ldr	r2, [pc, #408]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a63      	ldr	r2, [pc, #396]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe ff31 	bl	80018e0 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe ff2d 	bl	80018e0 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0ab      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCC_OscConfig+0x37e>
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe ff1b 	bl	80018e0 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe ff17 	bl	80018e0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e095      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8081 	beq.w	8002bee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d061      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d146      	bne.n	8002b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_OscConfig+0x4fc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe feeb 	bl	80018e0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fee7 	bl	80018e0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e067      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d108      	bne.n	8002b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	492d      	ldr	r1, [pc, #180]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a19      	ldr	r1, [r3, #32]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	4927      	ldr	r1, [pc, #156]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x4fc>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe febb 	bl	80018e0 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe feb7 	bl	80018e0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e037      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x46a>
 8002b8c:	e02f      	b.n	8002bee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_RCC_OscConfig+0x4fc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fea4 	bl	80018e0 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fea0 	bl	80018e0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e020      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x498>
 8002bba:	e018      	b.n	8002bee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e013      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	42420060 	.word	0x42420060

08002c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0d0      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d910      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4965      	ldr	r1, [pc, #404]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0b8      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a58      	ldr	r2, [pc, #352]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	494d      	ldr	r1, [pc, #308]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d040      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d115      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07f      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e073      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06b      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4936      	ldr	r1, [pc, #216]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fdf4 	bl	80018e0 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe fdf0 	bl	80018e0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e053      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d210      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4922      	ldr	r1, [pc, #136]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e032      	b.n	8002dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4916      	ldr	r1, [pc, #88]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d92:	f000 f821 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	490a      	ldr	r1, [pc, #40]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	5ccb      	ldrb	r3, [r1, r3]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fd52 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	080035ac 	.word	0x080035ac
 8002dd0:	20000694 	.word	0x20000694
 8002dd4:	20000698 	.word	0x20000698

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	b490      	push	{r4, r7}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de0:	1d3c      	adds	r4, r7, #4
 8002de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002de8:	f240 2301 	movw	r3, #513	; 0x201
 8002dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x40>
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x46>
 8002e16:	e02d      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1a:	623b      	str	r3, [r7, #32]
      break;
 8002e1c:	e02d      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c5b      	lsrs	r3, r3, #17
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e56:	fb02 f203 	mul.w	r2, r2, r3
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e004      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	623b      	str	r3, [r7, #32]
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e76:	623b      	str	r3, [r7, #32]
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc90      	pop	{r4, r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	08003050 	.word	0x08003050
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	003d0900 	.word	0x003d0900

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000694 	.word	0x20000694

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb0:	f7ff fff2 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	080035bc 	.word	0x080035bc

08002ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <RCC_Delay+0x34>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <RCC_Delay+0x38>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a5b      	lsrs	r3, r3, #9
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ef0:	bf00      	nop
  }
  while (Delay --);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	60fa      	str	r2, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <RCC_Delay+0x1c>
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000694 	.word	0x20000694
 8002f0c:	10624dd3 	.word	0x10624dd3

08002f10 <__cxa_pure_virtual>:
 8002f10:	b508      	push	{r3, lr}
 8002f12:	f000 f80d 	bl	8002f30 <_ZSt9terminatev>

08002f16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8002f16:	b508      	push	{r3, lr}
 8002f18:	4780      	blx	r0
 8002f1a:	f000 f80e 	bl	8002f3a <abort>
	...

08002f20 <_ZSt13get_terminatev>:
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <_ZSt13get_terminatev+0xc>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	f3bf 8f5b 	dmb	ish
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200006a0 	.word	0x200006a0

08002f30 <_ZSt9terminatev>:
 8002f30:	b508      	push	{r3, lr}
 8002f32:	f7ff fff5 	bl	8002f20 <_ZSt13get_terminatev>
 8002f36:	f7ff ffee 	bl	8002f16 <_ZN10__cxxabiv111__terminateEPFvvE>

08002f3a <abort>:
 8002f3a:	2006      	movs	r0, #6
 8002f3c:	b508      	push	{r3, lr}
 8002f3e:	f000 f85d 	bl	8002ffc <raise>
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7fe fc3e 	bl	80017c4 <_exit>

08002f48 <__errno>:
 8002f48:	4b01      	ldr	r3, [pc, #4]	; (8002f50 <__errno+0x8>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200006a4 	.word	0x200006a4

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	2600      	movs	r6, #0
 8002f58:	4d0c      	ldr	r5, [pc, #48]	; (8002f8c <__libc_init_array+0x38>)
 8002f5a:	4c0d      	ldr	r4, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	42a6      	cmp	r6, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	f000 f866 	bl	8003034 <_init>
 8002f68:	2600      	movs	r6, #0
 8002f6a:	4d0a      	ldr	r5, [pc, #40]	; (8002f94 <__libc_init_array+0x40>)
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	; (8002f98 <__libc_init_array+0x44>)
 8002f6e:	1b64      	subs	r4, r4, r5
 8002f70:	10a4      	asrs	r4, r4, #2
 8002f72:	42a6      	cmp	r6, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7c:	4798      	blx	r3
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f86:	4798      	blx	r3
 8002f88:	3601      	adds	r6, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	080035c4 	.word	0x080035c4
 8002f90:	080035c4 	.word	0x080035c4
 8002f94:	080035c4 	.word	0x080035c4
 8002f98:	080035cc 	.word	0x080035cc

08002f9c <memset>:
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4402      	add	r2, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <_raise_r>:
 8002fac:	291f      	cmp	r1, #31
 8002fae:	b538      	push	{r3, r4, r5, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	d904      	bls.n	8002fc0 <_raise_r+0x14>
 8002fb6:	2316      	movs	r3, #22
 8002fb8:	6003      	str	r3, [r0, #0]
 8002fba:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002fc2:	b112      	cbz	r2, 8002fca <_raise_r+0x1e>
 8002fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002fc8:	b94b      	cbnz	r3, 8002fde <_raise_r+0x32>
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f000 f830 	bl	8003030 <_getpid_r>
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fda:	f000 b817 	b.w	800300c <_kill_r>
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d00a      	beq.n	8002ff8 <_raise_r+0x4c>
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	d103      	bne.n	8002fee <_raise_r+0x42>
 8002fe6:	2316      	movs	r3, #22
 8002fe8:	6003      	str	r3, [r0, #0]
 8002fea:	2001      	movs	r0, #1
 8002fec:	e7e7      	b.n	8002fbe <_raise_r+0x12>
 8002fee:	2400      	movs	r4, #0
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002ff6:	4798      	blx	r3
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	e7e0      	b.n	8002fbe <_raise_r+0x12>

08002ffc <raise>:
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <raise+0xc>)
 8002ffe:	4601      	mov	r1, r0
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	f7ff bfd3 	b.w	8002fac <_raise_r>
 8003006:	bf00      	nop
 8003008:	200006a4 	.word	0x200006a4

0800300c <_kill_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	2300      	movs	r3, #0
 8003010:	4d06      	ldr	r5, [pc, #24]	; (800302c <_kill_r+0x20>)
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	f7fe fbc3 	bl	80017a4 <_kill>
 800301e:	1c43      	adds	r3, r0, #1
 8003020:	d102      	bne.n	8003028 <_kill_r+0x1c>
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	b103      	cbz	r3, 8003028 <_kill_r+0x1c>
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	bd38      	pop	{r3, r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	200007a4 	.word	0x200007a4

08003030 <_getpid_r>:
 8003030:	f7fe bbb1 	b.w	8001796 <_getpid>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
